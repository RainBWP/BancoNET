@page "/consultar-saldo"
@inject BancoApiClient BancoApiClient

<h3>Consultar Saldo</h3>

<EditForm Model="consulta" OnValidSubmit="OnConsultarSaldo" FormName="ConsultarSaldo">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="id">Account ID:</label>
        <InputNumber id="id" @bind-Value="consulta.Id" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="consulta.Password" type="password" />
    </div>

    <button type="submit">Consultar Saldo</button>
</EditForm>

@if (saldo.HasValue)
{
    <h3>Bienvenido @nombre</h3>
    <p>Saldo: @saldo.Value</p>
}
else if (errorMessage != null)
{
    <p style="color:red">@errorMessage</p>
}

@code {
    private ConsultaSaldoModel consulta = new ConsultaSaldoModel();
    private decimal? saldo;
    private string? errorMessage;
    private string? nombre;

    private async Task OnConsultarSaldo()
    {
        errorMessage = null;
        saldo = null;

        try
        {
            var result = await BancoApiClient.ConsultarSaldoAsync(consulta.Id, consulta.Password);
            if (result.HasValue)
            {
                saldo = result.Value;
                nombre = await BancoApiClient.ObtenerNombreAsync(consulta.Id, consulta.Password);
                if (string.IsNullOrEmpty(nombre))
                {
                    errorMessage = "Error al consultar el nombre. Verifique los datos ingresados.";
                }
            }
            else
            {
                errorMessage = "Error al consultar el saldo. Verifique los datos ingresados.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurrió un error: {ex.Message}";
        }
    }

    public class ConsultaSaldoModel
    {
        public int Id { get; set; }
        public string Password { get; set; } = string.Empty;
    }
}
